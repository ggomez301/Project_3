B
376         #Checks for Branch
  1         if argStr=='B':
  2             cycleCnt += 1
  3             prgCnt = str(getPrgCnt(lineStr))
  4 
  5             #finds where to branch to
  6             if cycleCnt == 1:
  7                 charCnt = 44
  8             else:
  9                 charCnt = 45
 10             branchStrVal = ""
 11             while(lineStr[charCnt] != '\n'):
 12                 branchStrVal += lineStr[charCnt]
 13                 charCnt += 1
 14             currInst += (int(branchStrVal))
 15             BDisplay = VDisplay()
 16             inptStr = "#" + branchStrVal
 17             BDisplay.printInfoB(wf, argStr, inptStr)
 18             BDisplay.printReg(wf)
 19             BDisplay.printData(wf)


CBZ/CBNZ
 34         #Checks for Branch Zero or NonZero
 33         elif argStr=='CBZ' or argStr == 'CBNZ':
 32             cycleCnt += 1
 31             prgCnt = str(getPrgCnt(lineStr))
 30 
 29             #branch zero instr
 28             Rt = int(lineStr[32:37], 2)
 27             strImmVal = lineStr[9:12] + lineStr[13:18] + lineStr[19:24] + lineStr[25:30] + lineStr[31]
 26             if lineStr[9] == "1":
 25                 intBinVal = int(strImmVal, 2) - 2**19
 24             else: intBinVal = int(strImmVal, 2)
 23 
 22             Dis = VDisplay()
 21             Dis.printInfoCB(wf, argStr, Rt, intBinVal)
 20             Dis.printReg(wf)
 19             Dis.printData(wf)
 18 
 17             #branches 
 16             if (argStr == 'CBZ'):
 15                 if reg[Rt] == 0:
 14                     currInst += intBinVal
 13                 else:
 12                     currInst += 1
 11             elif argStr == 'CBNZ':
 10                 if reg[Rt] != 0:
  9                     currInst += intBinVal
  8                 else:
  7                     currInst += 1

STUR 
492         #Checks for STUR
  1         #elif lineStr[0:8] + lineStr[9:12]  == instructDic["STUR"]:
  2         elif argStr=='STUR':
  3             cycleCnt += 1
  4             prgCnt = str(getPrgCnt(lineStr))
  5 
  6             #list of regArg regInput and immediate value
  7             #all are string integers which need to be converted to int values
  8             binRt = lineStr[32:37]
  9             binRn = lineStr[26:30] + lineStr[31]
 10             Rt = int(binRt, 2)
 11             Rn = int(binRn, 2)
 12             pndHit = 0
 13             strImmVal = ''
 14             for chr in lineStr:
 15                 if chr == '\n' or chr == ']':
 16                     pndHit = 0
 17                 if pndHit == 1:
 18                     strImmVal += chr
 19                 if chr == '#':
 20                     pndHit = 1
 21 
 22             #adds strImmVal to dataList and fills list with 0s
 23             dataListPos = int(strImmVal) * 4 + reg[Rn]
 24             dataListPos = dataListPos - (int(argCnt)*4+96)
 25             dataListPos = dataListPos / 4
 26             dataListAppend = 8 - (dataListPos % 7)
 27             dataListAppend += dataListPos
 28             stretchDataList(dataListAppend)
 29             dataList[dataListPos] = reg[int(Rt)]
 30 
 31             #starts display
 32             Dis = VDisplay()
 33             inptStr = "#" + strImmVal
 34             Dis.printInfoImm(wf, 'STUR', Rd, Rn, strImmVal)
 35             Dis.printReg(wf)
 36             Dis.printData(wf)
 37 
 38             currInst += 1


MOVZ/MOVK
563         #Check for MOVZ and MOVK
  1         elif argStr=='MOVZ' or argStr=='MOVK':
  2             cycleCnt += 1
  3             prgCnt = str(getPrgCnt(lineStr))
  4             #gets the binary string input val
  5             binVal = lineStr[13:18] + lineStr[19:24] + lineStr[25:30] + lineStr[31]
  6             lslVal = int(lineStr[10:12], 2)
  7             Rd = int(lineStr[32:37], 2)
  8             RdVal = reg[Rd]
  9             #stores the Rd value as a 64 bit binary string
 10             binRdVal = '{0:064b}'.format(RdVal)
 11             #Gets MOVK value to be stored in Rd
 12             if argStr=='MOVK':
 13                 regPos = 0
 14                 countbinRd = 63
 15                 countbinVal = 0
 16                 newRd = ''
 17                 for i in binRdVal:
 18                     if (countbinRd >= (lslVal*16)) and (countbinRd < ((lslVal+1)*16)):
 19                         newRd += binVal[countbinVal]
 20                         countbinVal+=1
 21                     else:
 22                         newRd += i
 23                     countbinRd-=1
 24                 reg[Rd] = int(newRd, 2)
 25                 Dis.printInfoMOV(wf, 'MOVK', Rd, int(binVal, 2), (lslVal*16))
 26                 Dis.printReg(wf)
 27                 Dis.printData(wf)
 28             #Gets MOVZ value to be stored in Rd
 29             else:
 30                 regPos = 0
 31                 countbinRd = 63
 32                 countbinVal = 0
 33                 newRd = ''
 34                 for i in binRdVal:
 35                     if (countbinRd >= (lslVal*16)) and (countbinRd < ((lslVal+1)*16)):
 36                         newRd += binVal[countbinVal]
 37                         countbinVal+=1
 38                     else:
 39                         newRd += '0'
 40                     countbinRd-=1
 41                 reg[Rd] = int(newRd, 2)
 42                 Dis.printInfoMOV(wf, 'MOVZ', Rd, int(binVal, 2), (lslVal*16))
 43                 Dis.printReg(wf)
 44                 Dis.printData(wf)
 45             currInst +=1

AND/ORR/EOR
636         elif argStr=='AND' or argStr=='ORR' or argStr=='EOR':
  1             cycleCnt += 1
  2             prgCnt = str(getPrgCnt(lineStr))
  3             #Grabbing Rd Rn Rm
  4             binRd = lineStr[32:37]
  5             binRn = lineStr[26:30] + lineStr[31]
  6             binRm = lineStr[13:18]
  7             Rd = int(binRd, 2)
  8             Rn = int(binRn, 2)
  9             Rm = int(binRm, 2)
 10 
 11             RnVal = reg[int(binRn, 2)]
 12             RmVal = reg[int(binRm, 2)]
 13             binRnVal = '{0:064b}'.format(RnVal)
 14             binRmVal = '{0:064b}'.format(RmVal)
 15             count = 0
 16             newBinStr = ''
 17             if argStr=='AND':
 18                 while count != 64:
 19                     if binRnVal[count] == '1' and binRmVal[count] == '1':
 20                         newBinStr+='1'
 21                     else:
 22                         newBinStr+='0'
 23                     count+=1
 24             elif argStr=='EOR':
 25                 while count != 64:
 26                     if int(binRnVal[count])+int(binRmVal[count])==1:
 27                         newBinStr+='1'
 28                     else:
 29                         newBinStr+='0'
 30                     count+=1
 31             else:
 32                 while count != 64:
 33                     if binRnVal[count] == '0' and binRmVal[count] == '0':
 34                         newBinStr+='0'
 35                     else:
 36                         newBinStr+='1'
 37                     count+=1
 38             newRd = int(newBinStr, 2)
 39             reg[int(binRd, 2)] = newRd
 40             #starts display
 41             Dis = VDisplay()
 42             inptStr = "#" + strImmVal

LSR
  4             elif argStr=='LSR': 
  3                 newRdBin = binRnVal[0:(64-int(strImmVal))] 
  2                 newerRdBin = int(strImmVal)*'0'+newRdBin 
  1                 newRd = int(newerRdBin, 2)  

